// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cppstuff.proto

#include "cppstuff.pb.h"
#include "cppstuff.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace cppstuff {

static const char* CppStuff_method_names[] = {
  "/cppstuff.CppStuff/SayHello",
  "/cppstuff.CppStuff/GetCarParkStatus",
};

std::unique_ptr< CppStuff::Stub> CppStuff::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CppStuff::Stub> stub(new CppStuff::Stub(channel, options));
  return stub;
}

CppStuff::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SayHello_(CppStuff_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCarParkStatus_(CppStuff_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CppStuff::Stub::SayHello(::grpc::ClientContext* context, const ::cppstuff::HelloRequest& request, ::cppstuff::HelloReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cppstuff::HelloRequest, ::cppstuff::HelloReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SayHello_, context, request, response);
}

void CppStuff::Stub::async::SayHello(::grpc::ClientContext* context, const ::cppstuff::HelloRequest* request, ::cppstuff::HelloReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cppstuff::HelloRequest, ::cppstuff::HelloReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, std::move(f));
}

void CppStuff::Stub::async::SayHello(::grpc::ClientContext* context, const ::cppstuff::HelloRequest* request, ::cppstuff::HelloReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cppstuff::HelloReply>* CppStuff::Stub::PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::cppstuff::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cppstuff::HelloReply, ::cppstuff::HelloRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SayHello_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cppstuff::HelloReply>* CppStuff::Stub::AsyncSayHelloRaw(::grpc::ClientContext* context, const ::cppstuff::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSayHelloRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CppStuff::Stub::GetCarParkStatus(::grpc::ClientContext* context, const ::cppstuff::CarParkStatusRequest& request, ::cppstuff::CarParkStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cppstuff::CarParkStatusRequest, ::cppstuff::CarParkStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCarParkStatus_, context, request, response);
}

void CppStuff::Stub::async::GetCarParkStatus(::grpc::ClientContext* context, const ::cppstuff::CarParkStatusRequest* request, ::cppstuff::CarParkStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cppstuff::CarParkStatusRequest, ::cppstuff::CarParkStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCarParkStatus_, context, request, response, std::move(f));
}

void CppStuff::Stub::async::GetCarParkStatus(::grpc::ClientContext* context, const ::cppstuff::CarParkStatusRequest* request, ::cppstuff::CarParkStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCarParkStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cppstuff::CarParkStatusResponse>* CppStuff::Stub::PrepareAsyncGetCarParkStatusRaw(::grpc::ClientContext* context, const ::cppstuff::CarParkStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cppstuff::CarParkStatusResponse, ::cppstuff::CarParkStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCarParkStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cppstuff::CarParkStatusResponse>* CppStuff::Stub::AsyncGetCarParkStatusRaw(::grpc::ClientContext* context, const ::cppstuff::CarParkStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCarParkStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

CppStuff::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CppStuff_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CppStuff::Service, ::cppstuff::HelloRequest, ::cppstuff::HelloReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CppStuff::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cppstuff::HelloRequest* req,
             ::cppstuff::HelloReply* resp) {
               return service->SayHello(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CppStuff_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CppStuff::Service, ::cppstuff::CarParkStatusRequest, ::cppstuff::CarParkStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CppStuff::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cppstuff::CarParkStatusRequest* req,
             ::cppstuff::CarParkStatusResponse* resp) {
               return service->GetCarParkStatus(ctx, req, resp);
             }, this)));
}

CppStuff::Service::~Service() {
}

::grpc::Status CppStuff::Service::SayHello(::grpc::ServerContext* context, const ::cppstuff::HelloRequest* request, ::cppstuff::HelloReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CppStuff::Service::GetCarParkStatus(::grpc::ServerContext* context, const ::cppstuff::CarParkStatusRequest* request, ::cppstuff::CarParkStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace cppstuff

